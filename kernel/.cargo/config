[build]
target = "x86_64-aurOS-none.json"

# Setting up these flags is apparently not the smartest idea, and more intelligent people have created a guide for
# getting started with no_std Rust. However, I'm lazy, so I'm going to stick with this for now.

# On Linux, we pass in `-nostartfiles` to the linker to prevent it from trying to use libc.
[target.'cfg(target_os = "linux")']
rustflags = ["-C", "link-arg=-nostartfiles"]

# On Windows, we have to tell the linker to look for a different entry point (`_start`), and since we're specifying a
# different entry point, we have to specify which subsystem (CONSOLE or WINDOWS) we're using.
[target.'cfg(target_os = "windows")']
rustflags = ["-C", "link-args=/ENTRY:_start /SUBSYSTEM:console"]

# On MacOS, we have to also say that we're using a different entry point (`_start`). However, since MacOS appends `_` to
# all functions, our entry point is now actually `__start`. We also have to tell it to build a static binary since it
# requires that all programs link to libSystem by default, and also that we don't want to use crt0.
[target.'cfg(target_os = "macos")']
rustflags = ["-C", "link-args=-e __start -static -nostartfiles"]

[target.'cfg(target_os = "none")']
runner = "echo Unable to run kernel on its own. Make sure to use the make command. Kernel executable path: "
